--[[ Lua code. See documentation: http://berserk-games.com/knowledgebase/scripting/ --]]
--[[ The onLoad event is called after the game save finishes loading. --]]

--[[ The onUpdate event is called once per frame. --]]
function onUpdate ()
    --[[ print('onUpdate loop!') --]]
end

-- action = {
--   spawn = {
--     json = object.getObjectJson(),
--     position = object.getPosition(),
--     rotation = object.getRotation(),
--     scale = object.getScale()
--   }
--   move = {
--     position = Table,
--     rotation = Table
--   }
--   destroyed = false
-- }

function onLoad(serializedState)
    self.UI.hide("recordActionPanel")

    inches = 2.54
    rangeToolRanges = {5, 10, 15, 20, 30, 45, 60, 75, 15, 0}
    elevation = 0.2
    thickness = 0.05

    -- Original models and positions when the recording started
    recorded = {}
    -- JSON serialized version (single string) of recorded, to optimize save
    recordedSerialized = "{}"
    -- Actions are recorded based on model GUID, when later deleted and respawned during replay initialization
    -- new model GUID needs to be mapped to the originaly recorded GUID.
    guidMapping = {} -- TODO: needed with proper spawning?!?
    -- All actions recorded
    actions = {}
    -- List of all recorded actions in JSON serialized form
    actionsSerialized = {}
    -- Current action
    action = {}
    -- Action index during replay, first action = 1
    actionIndex = 1
    -- State of recording 0=before recording started, 1=recording in progress, 2=replay
    recordState = 0

    if serializedState != "" then
      local time = os.time()
      local start, ending = string.find(serializedState, "([^|]+)")
      recordedSerialized = string.sub(serializedState, start, ending)

      start, ending = string.find(serializedState, "([^|]+)", ending + 1)
      actionsSerialized = string.sub(serializedState, start, ending)

      local dynamicSerialized = string.sub(serializedState, ending + 2)
      log(os.time() - time, "Split")

      recorded = JSON.decode(recordedSerialized)
      log(os.time() - time, "JSON.decode(recordedSerialized)")

      actions = JSON.decode(actionsSerialized)
      log(os.time() - time, "JSON.decode(actionsSerialized)")

      local dynamic = JSON.decode(dynamicSerialized)
      guidMapping = dynamic.guidMapping
      action = dynamic.action
      actionIndex = dynamic.actionIndex
      recordState = dynamic.recordState

      log(os.time() - time, "JSON.decode(dynamicSerialized)")

      actionsSerialized = {} -- TODO: init only needed if recording in progress
      for k, v in pairs(actions) do
        table.insert(actionsSerialized, JSON.encode(v))
      end

      log(os.time() - time, "Total load time")
    end

    setupContextMenu()
    addHotkey("Record action", recordAction, false)
    addHotkey("Next action", nextAction, false)
    self.UI.hide("loadingPanel")
end

function onSave()
  local start = os.clock()
  local state = recordedSerialized .. "|" .. serializeActions() .. "|" .. JSON.encode({
    guidMapping = guidMapping,
    action = action,
    actionIndex = actionIndex,
    recordState = recordState,
  })
  log(os.clock() - start, "State creation time")
  return state
end

function serializeActions()
  return "[" .. table.concat(actionsSerialized, ",") .. "]"
end

function setupContextMenu()
  clearContextMenu()

  if recordState == 0 then
    addContextMenuItem("+ to recording", tagRecorded)
    addContextMenuItem("- from recorded", removeRecorded)
    addContextMenuItem("Show recorded", flash)
    addContextMenuItem("Start recording", saveInitial)
  elseif recordState == 1 then
    addContextMenuItem("Record action", recordAction)
    addContextMenuItem("End recording", finalizeRecording)
  else
    addContextMenuItem("Restart replay", toInitial)
    addContextMenuItem("Show next", nextAction)
  end
end

-- Highlight all recorded models
function flash(player_color, menu_position)
  items = getObjectsWithTag("recorded")
  for k, v in pairs(items) do
    v.highlightOn(player_color, 1)
  end
end

-- add models to the recording
function tagRecorded(player_color, menu_position)
    local selected = Player[player_color].getSelectedObjects()
    for k, v in pairs(selected) do
      v.addTag("recorded")
    end
end

-- remove models from the recording
function removeRecorded(player_color, menu_position)
    local selected = Player[player_color].getSelectedObjects()
    for k, v in pairs(selected) do
      v.removeTag("recorded")
    end
end

-- Save initial state of the recording and info about recorded modes
-- in order to be able to spawn them later
function saveInitial(player_color, menu_position)
  items = getObjectsWithTag("recorded")

  for k, v in pairs(items) do
    recorded[v.guid] = getSpawnInfo(v)
  end

  recordedSerialized = JSON.encode(recorded)
  recordState = 1
  setupContextMenu()
end

-- End the recording
function finalizeRecording()
  recordState = 2
  setupContextMenu()
end

-- Init recording of an action, will show UI for action text input
function recordAction(player)
  if recordState == 1 then
    self.UI.setAttribute("recordActionPanel", "visibility", player)
    self.UI.show("recordActionPanel")
  else
    broadcastToColor("Recording has not started", player)
  end
end

-- Called by action input field when edited
function cacheActionText(player, text)
  action.text = text
end

-- User saved action, triggered from UI
function recordActionSave(player)
  actions[actionIndex] = action
  table.insert(actionsSerialized, JSON.encode(action))

  action = {}
  actionIndex = actionIndex + 1

  self.UI.hide("recordActionPanel")
  self.UI.setAttribute("recordActionText", "text", "")
end

-- User canceled record action dialog, triggered from UI
function recordActionCancel()
  self.UI.hide("recordActionPanel")
  self.UI.setAttribute("recordActionText", "text", "")
end

-- Move models to starting position and spawn deleted models
function toInitial(player_color, menu_position)
  -- delete all objects spawned during the game
  items = getObjectsWithTag("recorded")
  for k, v in pairs(items) do
    if recorded[v.guid] == nil then
      destroyObject(v)
    end
  end

  -- Reset action index to play from first action
  actionIndex = 1

  for k, v in pairs(recorded) do
    local item = getObjectFromGUID(k)

    -- The model not deleted, move to starting position
    if item != nil then
      guidMapping[k] = k
      item.setPositionSmooth(v.position, false, true)
      item.setRotationSmooth(v.rotation, false, true)
    else -- Spawn the model at the starting position
      local object = localSpawn(v)
      guidMapping[k] = object.guid
    end
  end
end

-- Replay next action
function nextAction(color)
  if recordState != 2 then
    broadcastToColor("Replay not started", color)
    return
  end

  -- remove all models marked as killed in previous action
  deleteDead()
  local action = actions[actionIndex]

  -- If we reached the end of the replay
  if action == nil then
    broadcastToAll("End of recording")
    return
  end

  -- Show axtion description as a broadcast
  broadcastToAll(action.text)

  -- Execute all recorded changes for this action
  for k, v in pairs(action) do
    if k != "text" then
      local item

      -- Spawn the object if it is new for this action
      if v.spawn != nil then
        item = localSpawn(v.spawn)
        guidMapping[k] = item.guid
      else -- or load it by GUID
        item = getObjectFromGUID(guidMapping[k])
      end

      -- Move it, if moved
      if v.move != nil then
        if v.move.position != nil then
          item.setPositionSmooth(v.move.position, false, false)
        end
        if v.move.rotation != nil then
          item.setRotationSmooth(v.move.rotation, false, false)
        end
      end

      -- Mark it deleted, if destroyed
      if v.destroyed then
        item.highlightOn("Red")
        item.addTag("dead")
      end
    end
  end

  -- Move on to next action
  actionIndex = actionIndex + 1
end

-- Delete all models marked as dead
function deleteDead()
  items = getObjectsWithTag("dead")
  for k, v in pairs(items) do
    destroyObject(v)
  end
end

-- Record deleted models, called by the game
function onObjectDestroy(object)
  if object.hasTag("recorded") and not object.hasTag("dead") and recordState == 1 then
    if action[object.guid] != nil then
      action[object.guid].destroyed = true
    else
      action[object.guid] = {
        destroyed = true
      }
    end
  end
end

-- Record rotated models, called by the game
function onObjectRotate(object, spin, flip, player_color, old_spin, old_flip)
  if object.hasTag("recorded") and recordState == 1 then
    recordMove(object)
  end
end

-- Record moved models, called by the game
function onObjectDrop(colorName, object)
  if object.hasTag("recorded") and recordState == 1 then
    recordMove(object)
  end
end

-- record the initial position of the model if this was not part of the setup, eg BMs, Daemons, etc... called by the game
function onObjectSpawn(object)
  if object.hasTag("recorded") and recordState == 1 then
    recordSpawn(object)
  end
end

-- Privte helper function: record a move (rotation or position change)
function recordMove(object)
  if action[object.guid] != nil then
    action[object.guid].move = {
      position = object.getPosition(),
      rotation = object.getRotation()
    }
  else
    action[object.guid] = {
      move = {
        position = object.getPosition(),
        rotation = object.getRotation()
      }
    }
  end
end

-- Privte helper function: Record info needed to respawn model on current action
function recordSpawn(object)
  if action[object.guid] != nil then
    action[object.guid].spawn = getSpawnInfo(object)
  else
    action[object.guid] = {
      spawn = getSpawnInfo(object)
    }
  end
end

-- Privte helper function: Spawn a model
function localSpawn(description)
  local object = spawnObjectJSON(description)
  object.addTag("recorded")

  return object
end

-- Privte helper function: Format info needed to respawn model
function getSpawnInfo(object)
  return {
    json = object.getJSON(false),
    position = object.getPosition(),
    rotation = object.getRotation(),
    scale = object.getScale(),
  }
end


-- Draw ZoC stuff
function onScriptingButtonDown(index, color)
    local player = Player[color]
    local selected = player.getSelectedObjects()
    local range = rangeToolRanges[index]
    if range == 0 then
      print(player.steam_name, " disabled highlight")
    elseif index == 9 then
      print(player.steam_name, " requested objective range highlight")
    else
      print(player.steam_name, " requested ", range, "cm highlight")
    end
    local rangeInCm = range / inches
    for k, v in pairs(selected) do
      if index == 10 then
        v.setVectorLines({})
      elseif  index == 9 then
        v.setVectorLines({
            {
                points    = circleFromCenter(v, rangeInCm),
                color     = stringColorToRGB(color),
                thickness = compensatedThickness(v),
                rotation  = {0, 0, 0},
            }
        })
      elseif hasRectangleBase(v) then
        v.setVectorLines({
            {
                points    = rectangleZoc(v, rangeInCm),
                color     = stringColorToRGB(color),
                thickness = compensatedThickness(v),
                rotation  = {0, 0, 0},
            }
        })
      else
        v.setVectorLines({
            {
                points    = circleZoc(v, rangeInCm),
                color     = stringColorToRGB(color),
                thickness = compensatedThickness(v),
                rotation  = {0, 0, 0},
            }
        })
      end
    end
end
function compensatedThickness(object)
  return (thickness / object.getScale()["x"])
end
function hasRectangleBase(obj)
  local size = obj.getBoundsNormalized()["size"]
  local ratio = math.abs(size[1]/size[3])
  return ratio < 0.95 or ratio > 1.05
end
function circleZoc(obj, radius)
    local size = obj.getBoundsNormalized()["size"]
    local radiusFromCenter = radius + (math.max(size[1], size[3]) / 2)
    local points = {}
    insertCircle(points, obj, radiusFromCenter, elevation)
    insertCircle(points, obj, radiusFromCenter, elevation + 1)
    return points
end
function circleFromCenter(obj, radius)
    local points = {}
    insertCircle(points, obj, radius, elevation)
    insertCircle(points, obj, radius, elevation + 1)
    return points
end
function rectangleZoc(obj, zoc)
  local points = {}
  insertRectangle(points, obj, elevation, zoc)
  insertRectangle(points, obj, elevation + 1, zoc)
  return points
end
function insertRectangle(points, obj, localElevation,  zoc)
  local width = obj.getBoundsNormalized()["size"][1]
  local height = obj.getBoundsNormalized()["size"][3]
  handleRactanglePoint(points, obj, {zoc+(width/2), localElevation, -height/2})
  for i=0,9 do
      handleRactanglePoint(points, obj, {(width/2) + math.cos(math.rad(i*10)) * zoc, localElevation, (height/2) + math.sin(math.rad(i*10)) * zoc})
  end
  for i=10,18 do
      handleRactanglePoint(points, obj, {(-width/2) + math.cos(math.rad(i*10)) * zoc, localElevation, (height/2) + math.sin(math.rad(i*10)) * zoc})
  end
  for i=19,27 do
      handleRactanglePoint(points, obj, {(-width/2) + math.cos(math.rad(i*10)) * zoc, localElevation, (-height/2) + math.sin(math.rad(i*10)) * zoc})
  end
  for i=28,36 do
      handleRactanglePoint(points, obj, {(width/2) + math.cos(math.rad(i*10)) * zoc, localElevation, (-height/2) + math.sin(math.rad(i*10)) * zoc})
  end
end
function insertCircle(points, object, radius, localElevation)
  for i = 0,36 do
    table.insert(points, globalToLocal(object, {
      (math.cos(math.rad(i*10)) * radius),
      localElevation,
      (math.sin(math.rad(i*10)) * radius)
    }))
  end
end
function handleRactanglePoint(result, object, point)
  local rotated = rotateRoundY(math.rad(-object.getRotation().y + 360), point)
  table.insert(result, globalToLocal(object, rotated))
end
function rotateRoundY(angle, point)
  return {
    point[1] * math.cos(angle) - point[3] * math.sin(angle),
    point[2],
    point[1] * math.sin(angle) + point[3] * math.cos(angle)
  }
end
function globalToLocal(object, coordinates)
  return object.positionToLocal({
    coordinates[1] + object.getPosition().x,
    coordinates[2] + object.getPosition().y,
    coordinates[3] + object.getPosition().z
  })
end
