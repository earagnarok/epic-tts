--[[ Lua code. See documentation: http://berserk-games.com/knowledgebase/scripting/ --]]
-- TODO: Record side changes of order dice doesn't work
-- TODO: Posibility to edit action text on older actions?

-- Hash object used to calculate hashes over strings
function createHash()
  local self = {
    hash = 0
  }

  local update = function(string)
    if string != nil then
      for idx = 1, #string do
        self.hash = bit32.bxor(self.hash, bit32.lshift(self.hash, 5) + bit32.rshift(self.hash, 2) + string:byte(idx))
      end
    end
  end

  local result = function()
    return "" .. self.hash
  end

  return {
    update = update,
    result = result
  }
end

-- Object holding all models recorded
function createRecordedModels()
  local self = {
    initialModels = {}, -- List of all GUIDs pressent when the recording started, used to restore initial state
    initial = true, -- Boolean if recording has started, once started models should not be added to the initialModels table
    models = {}, -- List of all models on the table (contains full or clone model info)
    modelsJson = {}, -- Serialized models
    modelIndex = {}, -- Map<ObjectIdentity, GUID> to lookup original GUID of a clone
    json = "{}", -- Serialized state
    dirty = true -- If the serialized state needs to be updated
  }

  -- Get an object representing a full description of the model
  local getFullSpawnInfo = function(model, modelId) -- private
    return {
      json = model.getJSON(false),
      position = model.getPosition(),
      rotation = model.getRotation(),
      scale = model.getScale(),
      identity = modelId,
      guid = model.guid
    }
  end

  -- Get an object representing a description of the model which is a clone of an already recorded model
  local getCloneSpawnInfo = function(model, cloneOf) -- private
    return {
      cloneOf = cloneOf,
      position = model.getPosition(),
      rotation = model.getRotation(),
      scale = model.getScale(),
      guid = model.guid
    }
  end

  -- Get the identity for this object in order to find cloned models
  local objectIdentity = function(model) -- private
    local hash = createHash()
    hash.update(model.getName())
    hash.update(model.getDescription())
    hash.update(model.getColorTint():toHex(false))
    hash.update(model.getCustomObject()["mesh"])
    for tag, value in pairs(model.getTags()) do
      if value != "recorded" then
        hash.update(value)
      end
    end
    for _, child in pairs(model.getAttachments()) do
      hash.update(child["name"])
      hash.update(child["description"])
    end

    return hash.result()
  end

  -- Mark recording as started, no more models should be added to the initialModels table
  local startRecording = function()
    self.initial = false
  end

  -- Add a model to the recording
  local add = function(model)
    if self.models[model.guid] != nil then
      log(model, "Model already added, ignoring!")
      return
    end

    self.dirty = true
    local modelId = objectIdentity(model)
    local cloneOf = self.modelIndex[modelId]
    if cloneOf != nil then
      self.models[model.guid] = getCloneSpawnInfo(model, cloneOf)
    else
      self.modelIndex[modelId] = model.guid
      self.models[model.guid] = getFullSpawnInfo(model, modelId)
    end

    -- save a serialized copy
    table.insert(self.modelsJson, JSON.encode(self.models[model.guid]))

    if self.initial then
      table.insert(self.initialModels, model.guid)
    end
  end

  -- returns a list of GUIDs for all models pressent when the recording was started
  local initialModels = function()
    return self.initialModels
  end

  -- returns the information needed to spawn the model with the given GUID
  local getModelJson = function(guid)
    local model = self.models[guid]
    if (model.cloneOf != null) then
      local originalJson = self.models[model.cloneOf].json
      model.json = string.gsub(originalJson, model.cloneOf, guid)
    end

    return model
  end

  -- Get a string representation of the save state
  local save = function()
    if self.dirty then
      self.json = table.concat(self.modelsJson, "|#|") .. "|#|" .. JSON.encode({
        initialModels = self.initialModels,
        initial = self.initial
      })
      self.dirty = false
    end

    return self.json
  end

  -- Load a save, called as part of a coroutine to avoid locking up TTS
  local load = function(json)
    if json != "" then
      self.dirty = false -- do not calculate new save state during loading
      local jsonSize = string.len(json)

      local index = 0
      local start, ending = string.find(json, "|#|", 0, true)

      -- Loop over the save to find each model, separated by |#|
      while start != nil and start != 1 do
        local modelJson = string.sub(json, index, start - 1)
        local model = JSON.decode(modelJson)
        self.models[model.guid] = model
        table.insert(self.modelsJson, modelJson)

        if model.identity != nil then
          self.modelIndex[model.identity] = model.guid
        end

        index = ending + 1
        start, ending = string.find(json, "|#|", index, true)

        local progress = math.floor(((index / jsonSize) * 100) + 0.5)
        Global.UI.setAttribute("loadingProgress", "text", progress .. "%")
        coroutine.yield(0)
      end

      -- The final part of the string is a json object containing initialModels and initial state
      local rest
      if ending != nil then -- if save does not contain models, else ending is nill
        rest = string.sub(json, ending + 1)
      else
        rest = string.sub(json, index)
      end

      local decoded = JSON.decode(rest)
      self.initialModels = decoded.initialModels
      self.initial = decoded.initial
      self.json = json
    end
  end

  return {
    add = add,
    getModelJson = getModelJson,
    initialModels = initialModels,
    load = load,
    save = save,
    startRecording = startRecording
  }
end

-- Object recording actions
function createActionsList(recordedModels)
  -- action = {
  --   spawn = guid, -- reference to object in recordedModels
  --   move = {
  --     position = Table,
  --     rotation = Table
  --   },
  --   destroyed = false
  -- }

  local self = {
    recordedModels = recordedModels, -- reference to the recorded
    actions = {}, -- list of all recorded actions
    actionsSerialized = {}, -- list of all recorded action in a serialized format
    action = {} -- current action
  }

  local save = function()
    return "{\"actions\": [" .. table.concat(self.actionsSerialized, ",") .. "], \"action\": " .. JSON.encode(action) .. "}"
  end

  local load = function(json)
    local decoded = JSON.decode(json)
    self.actions = decoded.actions

    if decoded.action != nil then
      self.action = decoded.action
    end

    -- Recreate the serialized state of all actions
    for _, v in pairs(self.actions) do
      table.insert(self.actionsSerialized, JSON.encode(v))
    end
  end

  -- Save current action and start on a new one
  local saveAction = function()
    table.insert(self.actions, self.action)
    table.insert(self.actionsSerialized, JSON.encode(self.action))
    self.recordedModels.save()

    if self.action.text != nil then
      printToAll("Action recorded: " .. self.action.text, {r=1,g=1,b=1})
    else
      printToAll("Action recorded", {r=1,g=1,b=1})
    end
    self.action = {}
  end

  -- Update current action with text
  local recordActionText = function(text)
    self.action.text = text
  end

  -- Update current action with a model move
  local recordMove = function(object)
    if self.action[object.guid] != nil then
      self.action[object.guid].move = {
        position = object.getPosition(),
        rotation = object.getRotation()
      }
    else
      self.action[object.guid] = {
        move = {
          position = object.getPosition(),
          rotation = object.getRotation()
        }
      }
    end
  end

  local recordRotation = function(object, y, z)
    recordMove(object)
    self.action[object.guid].move.rotation.y = y
    self.action[object.guid].move.rotation.z = z
  end

  -- update current action with a newly spawned model
  local recordSpawn = function(object)
    recordedModels.add(object)

    if self.action[object.guid] != nil then
      self.action[object.guid].spawn = object.guid
    else
      self.action[object.guid] = {
        spawn = object.guid
      }
    end
  end

  -- Update current action with a deleted model
  local recordDelete = function(objectGuid)
    if self.action[objectGuid] != nil then
      if self.action[objectGuid].spawn != nil then -- if the object was spawned during this action
        self.action[objectGuid] = nil -- remove the entire action for this model
      else
        self.action[objectGuid].destroyed = true
      end
    else
      self.action[objectGuid] = {
        destroyed = true
      }
    end
  end

  -- Get the action at index
  local getAction = function(actionIndex)
    return self.actions[actionIndex]
  end

  -- Reset current action
  local resetCurrent = function()
    self.action = {}
  end

  return {
    getAction = getAction,
    recordActionText = recordActionText,
    recordMove = recordMove,
    recordSpawn = recordSpawn,
    recordDelete = recordDelete,
    recordRotation = recordRotation,
    resetCurrent = resetCurrent,
    load = load,
    save = save,
    saveAction = saveAction
  }
end

function onLoad(serializedState)
  self.UI.hide("recordActionPanel")
  self.UI.hide("endRecordingPanel")

  -- ZoC variables
  inches = 2.54
  rangeToolRanges = {5, 10, 15, 20, 30, 45, 60, 75, 15, 0}
  elevation = 0.2
  thickness = 0.05

  -- Battle report variables
  recordedModels = createRecordedModels()
  actions = createActionsList(recordedModels)
  recordState = 0
  replayIndex = 1

  if serializedState != "" then
    local substringStart = 0

    local start, ending = string.find(serializedState, "|@|", 0, true)
    recordedSerialized = string.sub(serializedState, substringStart, start - 1)
    substringStart = ending + 1

    start, ending = string.find(serializedState, "|@|", substringStart, true)
    local actionsSerialized = string.sub(serializedState, substringStart, start - 1)
    substringStart = ending + 1

    local dynamicSerialized = string.sub(serializedState, substringStart)

    startLuaCoroutine(Global, "loadRecorded")
    actions.load(actionsSerialized)

    recordState = JSON.decode(dynamicSerialized).recordState
  else
    self.UI.hide("loadingPanel")
  end

  setupContextMenu()
  addHotkey("Record action", recordAction, false)
  addHotkey("Show next action", nextAction, false)
end

-- Internal function to load recorded models in a coroutine
function loadRecorded()
  recordedModels.load(recordedSerialized)
  self.UI.hide("loadingPanel")
  return 1
end

-- Called by the game every 10 seconds, make sure to return fast!
function onSave()
  -- local start = os.clock()
  local state = recordedModels.save() .. "|@|" .. actions.save() .. "|@|" .. JSON.encode({
    recordState = recordState,
  })
  -- log(state, "Save state")
  -- log(os.clock() - start, "State creation time")
  return state
end

function setupContextMenu()
  clearContextMenu()

  if recordState == 0 then
    addContextMenuItem("Record models", tagRecorded)
    addContextMenuItem("Forget models", removeRecorded)
    addContextMenuItem("Show recorded", flash)
    addContextMenuItem("Start recording", saveInitial)
  elseif recordState == 1 then
    addContextMenuItem("Record action", recordAction)
    addContextMenuItem("End recording", finalizeRecording)
  elseif actions.getAction(replayIndex) == nil then
    addContextMenuItem("Restart replay", toInitial)
    addContextMenuItem("Resume recording", resumeRecording)
  else
    addContextMenuItem("Restart replay", toInitial)
    addContextMenuItem("Show next action", nextAction)
  end
end

-- Highlight all recorded models
function flash(player_color, menu_position)
  local items = getObjectsWithTag("recorded")
  for _, v in pairs(items) do
    v.highlightOn(player_color, 1)
  end
end

-- add models to the recording
function tagRecorded(player_color, menu_position)
    local selected = Player[player_color].getSelectedObjects()
    for _, v in pairs(selected) do
      v.addTag("recorded")
    end
end

-- remove models from the recording
function removeRecorded(player_color, menu_position)
    local selected = Player[player_color].getSelectedObjects()
    for _, v in pairs(selected) do
      v.removeTag("recorded")
    end
end

-- Save initial state of the recording and info about recorded models
-- in order to be able to spawn them later
function saveInitial(player_color, menu_position)
  local items = getObjectsWithTag("recorded")
  for _, v in pairs(items) do
    recordedModels.add(v)
  end

  recordedModels.startRecording()
  recordedModels.save()
  recordState = 1
  setupContextMenu()
end

-- End the recording
function finalizeRecording()
  self.UI.show("endRecordingPanel")
end

function endRecordingOk()
  self.UI.hide("endRecordingPanel")
  recordState = 2
  toInitial()
end

function endRecordingCancel()
  self.UI.hide("endRecordingPanel")
end

-- Resume the recording
function resumeRecording()
  recordState = 1
  actions.resetCurrent()
  setupContextMenu()
end

-- Init recording of an action, will show UI for action text input
function recordAction(player)
  if recordState == 1 then
    self.UI.setAttribute("recordActionPanel", "visibility", player)
    self.UI.show("recordActionPanel")
  else
    broadcastToColor("Recording has not started", player)
  end
end

-- Called by action input field when edited
function cacheActionText(player, text)
  actions.recordActionText(text)
end

-- User saved action, triggered from UI
function recordActionSave(player)
  actions.saveAction()

  self.UI.hide("recordActionPanel")
  self.UI.setAttribute("recordActionText", "text", "")
end

-- User canceled record action dialog, triggered from UI
function recordActionCancel()
  self.UI.hide("recordActionPanel")
  self.UI.setAttribute("recordActionText", "text", "")
end

-- Move models to starting position and spawn deleted models
function toInitial()
  -- delete all objects
  local items = getObjectsWithTag("recorded")
  for _, v in pairs(items) do
    destroyObject(v)
  end

  -- Spawn all initial models
  local initial = recordedModels.initialModels()
  for _, guid in pairs(initial) do
    localSpawn(recordedModels.getModelJson(guid))
  end

  replayIndex = 1
  setupContextMenu()
end

-- Privte helper function: Spawn a model
function localSpawn(description)
  local object = spawnObjectJSON(description)
  object.addTag("recorded")

  return object
end

-- Replay next action
function nextAction(color)
  if recordState != 2 then
    broadcastToColor("Replay not started", color)
    return
  end

  local action = actions.getAction(replayIndex)
  if action == nil then -- If we reached the end of the replay
    broadcastToAll("End of recording")
    return
  end

  -- Show axtion description as a broadcast
  if action.text != nill then
    broadcastToAll(replayIndex .. ". " .. action.text)
  else
    broadcastToAll(replayIndex .. ".")
  end

  local modelsKilled = false
  -- Execute all recorded changes for this action
  for guid, v in pairs(action) do
    local item

    -- Spawn the object if it is new for this action
    if v.spawn != nil then
      item = localSpawn(recordedModels.getModelJson(v.spawn))
    else -- or load it by GUID
      item = getObjectFromGUID(guid)
    end

    -- TODO: item seems to be nil in some cases
    if item == nil then
      broadcastToAll("Script error :( see logs for more details")
      log(guid, "Failed to load item, guid: ")
      log(v, "Item action: ")
    else
      -- Move it, if moved
      if v.move != nil then
        if v.move.position != nil then
          item.setPositionSmooth(v.move.position, false, false)
        end
        if v.move.rotation != nil then
          item.setRotationSmooth(v.move.rotation, false, false)
        end
      end

      -- Mark it deleted, if destroyed
      if v.destroyed then
        item.addTag("dead")
        modelsKilled = true
      end
    end
  end

  if modelsKilled then
    startLuaCoroutine(Global, "fadeOutModels") -- fade out all models taged as dead
  end

  -- Move on to next action
  replayIndex = replayIndex + 1
  setupContextMenu()
end

-- Delete all models marked as dead
function fadeOutModels()
  local items

  for i=0,2 do
    items = getObjectsWithTag("dead") -- get the items agains because of concurrency
    for _, item in pairs(items) do
      item.highlightOn("Red", 0.4)
    end
    sleep(40)
  end

  items = getObjectsWithTag("dead") -- get the items agains because of concurrency
  for _, item in pairs(items) do
    destroyObject(item)
  end

  return 1
end

-- Let a coroutine sleep
function sleep(amount)
  local count = 0
  while count < amount do
      count = count + 1
      coroutine.yield(0)
  end
end


-- Record deleted models, called by the game
function onObjectDestroy(object)
  if object.hasTag("recorded") and not object.hasTag("dead") and recordState == 1 then
    actions.recordDelete(object.guid)
  end
end

-- Handle models changing state, called by the game
function onObjectStateChange(object, oldStateGuid)
  if object.hasTag("recorded") and recordState == 1 then
    actions.recordSpawn(object)
    actions.recordDelete(oldStateGuid)
  end
end

-- Record rotated models, called by the game
function onObjectRotate(object, spin, flip, player_color, old_spin, old_flip)
  if object.hasTag("recorded") and recordState == 1 then
    actions.recordRotation(object, spin, flip)
  end
end

-- Record rotate of e.g. an order dice
function onObjectNumberTyped(object, player_color, number)
  if object.hasTag("recorded") and recordState == 1 then
    actions.recordMove(object)
  end
end

-- Record moved models, called by the game
function onObjectDrop(colorName, object)
  if object.hasTag("recorded") and recordState == 1 then
    actions.recordMove(object)
  end
end

-- record the initial position of the model if this was not part of the setup, eg BMs, Daemons, etc... called by the game
function onObjectSpawn(object)
  if object.hasTag("recorded") and recordState == 1 then
    actions.recordSpawn(object)
  end
end


-- Draw ZoC stuff
function onScriptingButtonDown(index, color)
  local player = Player[color]
  local selected = player.getSelectedObjects()
  local range = rangeToolRanges[index]
  if index == 9 then
    printToAll(player.steam_name .. " requested objective range highlight", {r=1,g=1,b=1})
  else
    printToAll(player.steam_name .. " requested " .. range .. "cm highlight", {r=1,g=1,b=1})
  end
  local rangeInCm = range / inches
  for k, v in pairs(selected) do
    if index == 10 then
      v.setVectorLines({})
    elseif  index == 9 then
      v.setVectorLines({
          {
              points    = circleFromCenter(v, rangeInCm),
              color     = stringColorToRGB(color),
              thickness = compensatedThickness(v),
              rotation  = {0, 0, 0},
          }
      })
    elseif hasRectangleBase(v) then
      v.setVectorLines({
          {
              points    = rectangleZoc(v, rangeInCm),
              color     = stringColorToRGB(color),
              thickness = compensatedThickness(v),
              rotation  = {0, 0, 0},
          }
      })
    else
      v.setVectorLines({
          {
              points    = circleZoc(v, rangeInCm),
              color     = stringColorToRGB(color),
              thickness = compensatedThickness(v),
              rotation  = {0, 0, 0},
          }
      })
    end
  end
end

function compensatedThickness(object)
  return (thickness / object.getScale()["x"])
end

function hasRectangleBase(obj)
  local size = obj.getBoundsNormalized()["size"]
  local ratio = math.abs(size[1]/size[3])
  return ratio < 0.95 or ratio > 1.05
end

function circleZoc(obj, radius)
  local size = obj.getBoundsNormalized()["size"]
  local radiusFromCenter = radius + (math.max(size[1], size[3]) / 2)
  local points = {}
  insertCircle(points, obj, radiusFromCenter, elevation)
  insertCircle(points, obj, radiusFromCenter, elevation + 1)
  return points
end

function circleFromCenter(obj, radius)
  local points = {}
  insertCircle(points, obj, radius, elevation)
  insertCircle(points, obj, radius, elevation + 1)
  return points
end

function rectangleZoc(obj, zoc)
  local points = {}
  insertRectangle(points, obj, elevation, zoc)
  insertRectangle(points, obj, elevation + 1, zoc)
  return points
end

function insertRectangle(points, obj, localElevation,  zoc)
  local width = obj.getBoundsNormalized()["size"][1]
  local height = obj.getBoundsNormalized()["size"][3]
  handleRactanglePoint(points, obj, {zoc+(width/2), localElevation, -height/2})
  for i=0,9 do
      handleRactanglePoint(points, obj, {(width/2) + math.cos(math.rad(i*10)) * zoc, localElevation, (height/2) + math.sin(math.rad(i*10)) * zoc})
  end
  for i=10,18 do
      handleRactanglePoint(points, obj, {(-width/2) + math.cos(math.rad(i*10)) * zoc, localElevation, (height/2) + math.sin(math.rad(i*10)) * zoc})
  end
  for i=19,27 do
      handleRactanglePoint(points, obj, {(-width/2) + math.cos(math.rad(i*10)) * zoc, localElevation, (-height/2) + math.sin(math.rad(i*10)) * zoc})
  end
  for i=28,36 do
      handleRactanglePoint(points, obj, {(width/2) + math.cos(math.rad(i*10)) * zoc, localElevation, (-height/2) + math.sin(math.rad(i*10)) * zoc})
  end
end

function insertCircle(points, object, radius, localElevation)
  for i = 0,36 do
    table.insert(points, globalToLocal(object, {
      (math.cos(math.rad(i*10)) * radius),
      localElevation,
      (math.sin(math.rad(i*10)) * radius)
    }))
  end
end

function handleRactanglePoint(result, object, point)
  local rotated = rotateRoundY(math.rad(-object.getRotation().y + 360), point)
  table.insert(result, globalToLocal(object, rotated))
end

function rotateRoundY(angle, point)
  return {
    point[1] * math.cos(angle) - point[3] * math.sin(angle),
    point[2],
    point[1] * math.sin(angle) + point[3] * math.cos(angle)
  }
end

function globalToLocal(object, coordinates)
  return object.positionToLocal({
    coordinates[1] + object.getPosition().x,
    coordinates[2] + object.getPosition().y,
    coordinates[3] + object.getPosition().z
  })
end
